-- B432003.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--*
-- OBJECTIVE:
--     Check that the subtype_mark of an extension aggregate cannot denote a
--     view of a type that has unknown discriminants.
--
-- TEST DESCRIPTION:
--
--     The test declares a root private type, and then various extensions
--     of that type in a child package and an unrelated package. Finally,
--     extensions of the extensions are declared in a child package. The
--     tests are then carried out in the body of the root package, where the
--     full root type is visible, but the it is not visible for the extensions
--     which derive from the partial view of the root type. Note that the
--     full type for these tests does not have any discriminants; the purpose
--     of the unknown discriminants is just to prevent the creation of default
--     initialized objects.
--
--     This objective comes from a rule added by AI05-0115-1. Since the purpose
--     of unknown discriminants is to prevent the creation of default
--     initialized objects, it doesn't make sense to allow the ancestor of an
--     an extension aggregate to be a subtype with unknown discriminants (as
--     that created a default-initialized parent part).
--
-- CHANGE HISTORY:
--      30 Dec 19   RLB     Created test.
--!

package B432003 is

   type Root (<>) is tagged private;

   procedure Force_Body;

private

   type Root is tagged record
      C1 : Integer := 0;
   end record;

end B432003;


package B432003.Child1 is

   type Ext1 is new B432003.Root with record
      C2 : Integer;
   end record;

end B432003.Child1;

with B432003;
package B432003_Unrelated is

   type Ext2 is new B432003.Root with record
      C2 : Integer;
   end record;

end B432003_Unrelated;

with B432003_Unrelated;
with B432003.Child1;
package B432003.Child2 is

   type Ext3 is new B432003.Child1.Ext1 with record
      C3 : Integer;
   end record;

   type Ext4 is new B432003_Unrelated.Ext2 with record
      C3 : Integer;
   end record;

   type Ext5 is new B432003.Root with null record;

end B432003.Child2;


with B432003_Unrelated;
with B432003.Child1;
with B432003.Child2;
package body B432003 is

   generic
      type Form1 (<>) is tagged private;
   package Gen1 is
      type Ext6 is new Form1 with record
         C6 : Integer;
      end record;

      XG1 : Ext6 := (Form1 with C6 => 1);                   -- ERROR: {21;1}

      XG2 : Ext6 := (Form1 with others => <>);              -- ERROR: {21;1}
   end Gen1;

   generic
      type Form2 (<>) is new Root with private;
   package Gen2 is
      type Ext7 is new Form2 with record
         C7 : Integer;
      end record;

      XG3 : Ext7 := (Form2 with C7 => 1);                   -- ERROR: {21;1}

      XG4 : Ext7 := (Form2 with others => 0);               -- ERROR: {21;1}
   end Gen2;

   type Ext8 is new B432003.Child2.Ext3 with record
      C4 : Integer;
   end record;

   type Ext9 is new B432003.Child2.Ext4 with record
      C4 : Integer;
   end record;

   type ExtA is new B432003.Child2.Ext5 with null record;

   X01 : constant Ext8 :=
      (B432003.Root with others => 0);                      -- ERROR: {7;1}
      -- The view of Root from which Ext3 is descended has
      -- unknown discriminants.

   X02 : constant Ext8 :=
      (B432003.Child1.Ext1 with C3 | C4 => 0);              -- ERROR: {7;1}
      -- Ext1 inherited unknown discriminants from Root, and we're not
      -- in the immediate scope of Ext1.

   X03 : constant Ext8 :=
      (B432003.Child2.Ext3 with C4 => 0);                   -- ERROR: {7;1}
      -- Ext3 inherited unknown discriminants from Ext1 (which got them from
      -- Root), and we're not in the immediate scope of Ext3.

   X11 : constant Ext9 :=
      (B432003.Root with others => 0);                      -- ERROR: {7;1}
      -- The view of Root from from which Ext4 is descended has
      -- unknown discriminants.

   X12 : constant Ext9 :=
      (B432003_Unrelated.Ext2 with others => 0);            -- ERROR: {7;1}
      -- Ext2 inherited unknown discriminants from Root, and we're not
      -- in the immediate scope of Ext2.

   X13 : constant Ext9 :=
      (B432003.Child2.Ext4 with C4 => 0);                   -- ERROR: {7;1}
      -- Ext4 inherited unknown discriminants from Ext2 (which got them from
      -- Root), and we're not in the immediate scope of Ext4.

   X21 : constant ExtA :=
      (B432003.Root with others => <>);                     -- ERROR: {7;1}
      -- The view of Root from from which Ext5 is descended has
      -- unknown discriminants.

   X22 : constant ExtA :=
      (B432003.Child2.Ext5 with null record);               -- ERROR: {7;1}
      -- Ext5 inherited unknown discriminants from Root, and we're not in
      -- the immediate scope of Ext5.


   -- Note: It doesn't make sense to allow the ancestor of an aggregate
   -- (which is default-initialized) to have a type if a default-initialized
   -- stand-alone object would be illegal.

   X90 : B432003.Child2.Ext5;                               -- ERROR: {4;1}
   X91 : B432003.Child2.Ext4;                               -- ERROR: {4;1}
   X92 : B432003.Child2.Ext3;                               -- ERROR: {4;1}
   X93 : B432003_Unrelated.Ext2;                            -- ERROR: {4;1}
   X94 : B432003.Child1.Ext1;                               -- ERROR: {4;1}
   X95 : B432003.Root;                                      -- OK.    {4;1}
       -- Note: We can see the full view of Root here, but none of
       -- Ext1 through Ext5 are descended from the full view.

   procedure Force_Body is
   begin
      null; -- Force this package to have (and allow) a body.
   end Force_Body;

end B432003;
