-- B831006.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--*
-- OBJECTIVES:
--     Check that a subprogram with an overriding indicator is illegal in a
--     protected body.
--
-- TEST DESCRIPTION:
--     8.3.1(3/3) makes an exception for subprogram_declarations that are
--     protected subprograms, and no others. (The rules for overriding
--     indicators for protected subprograms are found in 9.4(11.10-13/2)).
--     9.5.1(1) makes it clear that protected subprograms can only be declared
--     in protected specifications; other subprograms are not protected
--     subprograms. Therefore, the rules of 8.3.1(3-7/2) apply in a protected
--     body: to any subprogram_declaration including a
--     null_procedure_declaration or an expression_function_declaration,
--     and to any subprogram_body found there. And it is always illegal to
--     give an indicator in a protected body, as no subprogram declared in a
--     protected body can be primitive (no types are allowed to be declared
--     there, thus there can be no inherited primitives), and protected
--     subprograms can never be primitive, either. (A protected subprogram
--     meets none of the conditions given in 3.2.3; see AI12-0182-1 for
--     a full analysis of this point.)
--
--     The ARG considered if a change to these rules was needed, and the
--     decision was to make no change (see AI12-0060-1 and associated
--     meeting minutes).
--
--     This test assumes that the extension allowed by AI12-0147-1 (included
--     in the Ada 2012 Corrigendum) is supported.
--
-- CHANGE HISTORY:
--     17 Dec 2018  RLB  Created new test.

package B831006A is

   type Intf is synchronized interface;

   procedure Add (Obj : in out Intf; Val : in Natural) is abstract;

   function Value (Obj : in Intf) return Natural is abstract;

end B831006A;

with B831006A;
package B831006 is

   protected Prot1 is -- Single, untagged.

      not overriding
      procedure Add (Val : in Natural);               -- OK. {1:7;1}

      not overriding
      function Value return Natural;                  -- OK. {1:7;1}

   private
      Counter : Natural := 0;
   end Prot1;


   protected type Prot2 is new B831006A.Intf with -- Type, tagged.

      overriding
      procedure Add (Val : in Natural);               -- OK. {1:7;1}

      not overriding
      procedure Reset;                                -- OK. {1:7;1}

      overriding
      function Value return Natural;                  -- OK. {1:7;1}

   private
      Counter : Natural := 0;
   end Prot2;

end B831006;


package body B831006 is

   protected body Prot1 is

      not overriding
      procedure Bump;                                 -- ERROR: {1:7;1}
         -- Note: Not a protected subprogram.

      not overriding
      procedure No_Op is null;                        -- ERROR: {1:7;1}

      not overriding
      procedure Add (Val : in Natural) is             -- ERROR: {1:7}
      begin
         Counter := Counter + Val;
      end Add;

      not overriding
      function Value return Natural is (Counter);     -- ERROR: {1:7;1}

      procedure Bump is                               -- OPTIONAL ERROR: {1:7}
         -- The specification of Bump is illegal.
      begin
         Counter := Counter + 1;
      end Bump;

      function Triple return Natural is (Counter*3);  -- OK. {7;1}

   end Prot1;


   protected body Prot2 is -- Type, tagged.

      not overriding
      procedure Bump;                                 -- ERROR: {1:7;1}
         -- Note: Not a protected subprogram.

      not overriding
      procedure Reset is null;                        -- ERROR: {1:7;1}

      not overriding
      function Double return Natural is (Counter*2);  -- ERROR: {1:7;1}

      overriding
      procedure Add (Val : in Natural) is             -- ERROR: {1:7}
      begin
         Counter := Counter + Val;
      end Add;

      overriding
      function Value return Natural is                -- ERROR: {1:7}
      begin
         return Counter;
      end Value;

      procedure Bump is                               -- OPTIONAL ERROR: {1:7}
         -- The specification of Bump is illegal.
      begin
         Counter := Counter + 1;
      end Bump;

      function Triple return Natural is (Counter*3);  -- OK. {7;1}

   end Prot2;

end B831006;
