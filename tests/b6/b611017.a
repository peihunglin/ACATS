-- B611017.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--
--*
--
-- OBJECTIVE:
--    Check that Pre'Class cannot be specified for an overriding of a
--    subprogram that does not specify Pre'Class.
--
--    Check that an instance is illegal if the instance contains a subprogram
--    that specifies Pre'Class and overrides a primitive operation of a formal
--    type that does not specify Pre'Class.
--
-- TEST DESCRIPTION:
--    We declare a limited interface and an abstract type, with some operations
--    that have Pre'Class and some that don't. We then check overridings of
--    these operations.
--
--    We also declare a (mix-in) generic with the tagged private parameter,
--    and a derived type with an operation that includes a Pre'Class. We then
--    check instances of the generic.
--
--    This rule was added by AI12-0131-1, part of Technical Corrigendum 1 for
--    Ada 2012. Such a precondition is inherited as True from the ancestor,
--    which means the class-wide precondition check cannot fail, regardless
--    of any added Pre'Class. Moreover, 6.1.1(34/4) says that it is unspecified
--    whether the added Pre'Class is even evaluated in this case, so even
--    side-effects of the evaluation most likely won't happen. So such a
--    Pre'Class is very misleading to the reader and quite likely is a mistake.
--    (Either the Pre'Class should be moved to the original operation, or
--    Pre should be used.)
--
-- CHANGE HISTORY:
--     17 Nov 2016   RLB   Created test.
--
--!
package B611017A is

   type Intf is limited interface;

   function Is_Green (A_Intf : Intf) return Boolean is abstract;

   function Is_Round (A_Intf : Intf) return Boolean is abstract;

   function Is_Hard (A_Intf : Intf; N : in Natural) return Boolean is abstract
      with Pre'Class => Is_Round (A_Intf);

   procedure Has_It (A_Intf : in out Intf; N : in Natural) is abstract
      with Pre'Class => Is_Green (A_Intf);

   procedure Doesnt_Have_It (A_Intf : in out Intf; N : in Natural) is abstract;

   procedure Has_It_True (A_Intf : in out Intf; N : in Natural) is abstract
      with Pre'Class => True;


   type None is limited interface;
      -- For "None", no primitives have any preconditions.

   function Is_Green (A_None : None) return Boolean is abstract;

   function Is_Round (A_None : None) return Boolean is abstract;

   function Is_Hard (A_None : None; N : in Natural) return Boolean is abstract;

   procedure Has_It (A_None : in out None; N : in Natural) is abstract;

   procedure Doesnt_Have_It (A_None : in out None; N : in Natural) is abstract;

   procedure Has_It_True (A_None : in out None; N : in Natural) is abstract;


   type Abstr is abstract tagged record
      N : Natural;
   end record;

   function Is_Green (A_Abstr : Abstr) return Boolean is abstract;

   function Is_Round (A_Abstr : Abstr) return Boolean is abstract;

   function Is_Hard (A_Abstr : Abstr; N : in Natural) return Boolean
      is abstract
      with Pre'Class => Is_Round (A_Abstr);

   procedure Has_It (A_Abstr : in out Abstr; N : in Natural) is abstract
      with Pre'Class => Is_Green (A_Abstr);

   procedure Doesnt_Have_It (A_Abstr : in out Abstr; N : in Natural)
      is abstract;

   procedure Has_It_True (A_Abstr : in out Abstr; N : in Natural) is abstract
      with Pre'Class => True;


   generic
      type Priv is tagged private;
   package Gen1 is
      type Mix_In is new Priv with private;

      function Is_Smooth (M : Mix_In) return Boolean;

      procedure Shine (M : in out Mix_In)
         with Pre'Class => Is_Smooth (M);

   private
      type Mix_In is new Priv with null record;
   end Gen1;

   generic
      type Priv is tagged private;
   package Gen2 is
      type Mix_In is new Priv with private;

      function Is_Smooth (M : Mix_In) return Boolean;

   private
      type Mix_In is new Priv with null record;

      procedure Shine (M : in out Mix_In)
         with Pre'Class => Is_Smooth (M);

   end Gen2;

   generic
      type Priv is tagged private;
   package Gen3 is
      type Mix_In is new Priv with private;

      function Is_Smooth (M : Mix_In) return Boolean;

      procedure Shine (M : in out Mix_In)
         with Pre => Is_Smooth (M);

   private
      type Mix_In is new Priv with null record;
   end Gen3;


end B611017A;

with B611017A;
package B611017 is

   type T01 is new B611017A.Intf with null record;

   function Is_Green (A_T01 : T01) return Boolean;

   function Is_Round (A_T01 : T01) return Boolean
      with Pre'Class => Is_Green (A_T01);                      -- ERROR: {12;1}

   function Is_Hard (A_T01 : T01; N : in Natural) return Boolean
      with Pre'Class => Is_Round (A_T01);                      -- OK. {12;1}

   procedure Has_It (A_T01 : in out T01; N : in Natural)
      with Pre'Class => Is_Hard (A_T01, N);                    -- OK. {12;1}

   procedure Doesnt_Have_It (A_T01 : in out T01; N : in Natural)
      with Pre'Class => Is_Hard (A_T01, N);                    -- ERROR: {12;1}

   procedure Has_It_True (A_T01 : in out T01; N : in Natural)
      with Pre'Class => Is_Hard (A_T01, N);                    -- OK. {12;1}

   procedure New_Proc (A_T01 : in out T01; N : in Natural)
      with Pre'Class => Is_Hard (A_T01, N);                    -- OK. {12;1}


   type T02 is new B611017A.Intf with null record;

   function Is_Green (A_T02 : T02) return Boolean;

   function Is_Round (A_T02 : T02) return Boolean
      with Pre => Is_Green (A_T02);                            -- OK. {12;1}

   function Is_Hard (A_T02 : T02; N : in Natural) return Boolean
      with Pre => Is_Round (A_T02);                            -- OK. {12;1}

   procedure Has_It (A_T02 : in out T02; N : in Natural)
      with Pre => Is_Hard (A_T02, N);                          -- OK. {12;1}

   procedure Doesnt_Have_It (A_T02 : in out T02; N : in Natural)
      with Pre => Is_Hard (A_T02, N);                          -- OK. {12;1}

   procedure Has_It_True (A_T02 : in out T02; N : in Natural)
      with Pre => Is_Hard (A_T02, N);                          -- OK. {12;1}

   procedure New_Proc (A_T02 : in out T02; N : in Natural)
      with Pre'Class => Is_Hard (A_T02, N);                    -- OK. {12;1}


   type T03 is new B611017A.Intf with private;

   function Is_Green (A_T03 : T03) return Boolean;

   function Is_Round (A_T03 : T03) return Boolean
      with Pre'Class => Is_Green (A_T03);                      -- ERROR: {12;1}

   function Is_Hard (A_T03 : T03; N : in Natural) return Boolean
      with Pre'Class => Is_Round (A_T03);                      -- OK. {12;1}

   procedure Has_It (A_T03 : in out T03; N : in Natural)
      with Pre'Class => Is_Hard (A_T03, N);                    -- OK. {12;1}

   procedure Doesnt_Have_It (A_T03 : in out T03; N : in Natural)
      with Pre'Class => Is_Hard (A_T03, N);                    -- ERROR: {12;1}

   procedure Has_It_True (A_T03 : in out T03; N : in Natural)
      with Pre'Class => Is_Hard (A_T03, N);                    -- OK. {12;1}

   procedure New_Proc (A_T03 : in out T03; N : in Natural)
      with Pre'Class => Is_Hard (A_T03, N);                    -- OK. {12;1}


   type T04 is new B611017A.Abstr with null record;

   function Is_Green (A_T04 : T04) return Boolean;

   function Is_Round (A_T04 : T04) return Boolean
      with Pre'Class => Is_Green (A_T04);                      -- ERROR: {12;1}

   function Is_Hard (A_T04 : T04; N : in Natural) return Boolean
      with Pre'Class => Is_Round (A_T04);                      -- OK. {12;1}

   procedure Has_It (A_T04 : in out T04; N : in Natural)
      with Pre'Class => Is_Hard (A_T04, N);                    -- OK. {12;1}

   procedure Doesnt_Have_It (A_T04 : in out T04; N : in Natural)
      with Pre'Class => Is_Hard (A_T04, N);                    -- ERROR: {12;1}

   procedure Has_It_True (A_T04 : in out T04; N : in Natural)
      with Pre'Class => Is_Hard (A_T04, N);                    -- OK. {12;1}

   procedure New_Proc (A_T04 : in out T04; N : in Natural)
      with Pre'Class => Is_Hard (A_T04, N);                    -- OK. {12;1}


   type T05 is new T02 with private;

   function Is_Green (A_T05 : T05) return Boolean;

   function Is_Round (A_T05 : T05) return Boolean
      with Pre'Class => Is_Green (A_T05);                      -- ERROR: {12;1}

   function Is_Hard (A_T05 : T05; N : in Natural) return Boolean
      with Pre'Class => Is_Round (A_T05);                      -- OK. {12;1}

   procedure Has_It (A_T05 : in out T05; N : in Natural)
      with Pre'Class => Is_Hard (A_T05, N);                    -- OK. {12;1}

   procedure Doesnt_Have_It (A_T05 : in out T05; N : in Natural)
      with Pre'Class => Is_Hard (A_T05, N);                    -- ERROR: {12;1}

   procedure Has_It_True (A_T05 : in out T05; N : in Natural)
      with Pre'Class => Is_Hard (A_T05, N);                    -- OK. {12;1}

   procedure New_Proc (A_T05 : in out T05; N : in Natural)
      with Pre'Class => Is_Hard (A_T05, N);                    -- OK. {12;1}


   type T06 is new B611017A.Abstr with null record;

   function Is_Green (A_T06 : T06) return Boolean;

   function Is_Round (A_T06 : T06) return Boolean
      with Pre => Is_Green (A_T06);                            -- OK. {12;1}

   function Is_Hard (A_T06 : T06; N : in Natural) return Boolean
      with Pre => Is_Round (A_T06);                            -- OK. {12;1}

   procedure Has_It (A_T06 : in out T06; N : in Natural)
      with Pre => Is_Hard (A_T06, N);                          -- OK. {12;1}

   procedure Doesnt_Have_It (A_T06 : in out T06; N : in Natural)
      with Pre => Is_Hard (A_T06, N);                          -- OK. {12;1}

   procedure Has_It_True (A_T06 : in out T06; N : in Natural)
      with Pre => Is_Hard (A_T06, N);                          -- OK. {12;1}

   procedure New_Proc (A_T06 : in out T06; N : in Natural)
      with Pre'Class => Is_Hard (A_T06, N);                    -- OK. {12;1}


   -- Check that if one ancestor has Pre'Class and the other does not, it is
   -- still allowed:
   type T07 is new B611017A.None and B611017A.Intf with null record;

   function Is_Green (A_T07 : T07) return Boolean;

   function Is_Round (A_T07 : T07) return Boolean
      with Pre'Class => Is_Green (A_T07);                      -- ERROR: {12;1}

   function Is_Hard (A_T07 : T07; N : in Natural) return Boolean
      with Pre'Class => Is_Round (A_T07);                      -- OK. {12;1}

   procedure Has_It (A_T07 : in out T07; N : in Natural)
      with Pre'Class => Is_Hard (A_T07, N);                    -- OK. {12;1}

   procedure Doesnt_Have_It (A_T07 : in out T07; N : in Natural)
      with Pre'Class => Is_Hard (A_T07, N);                    -- ERROR: {12;1}

   procedure Has_It_True (A_T07 : in out T07; N : in Natural)
      with Pre'Class => Is_Hard (A_T07, N);                    -- OK. {12;1}

   procedure New_Proc (A_T07 : in out T07; N : in Natural)
      with Pre'Class => Is_Hard (A_T07, N);                    -- OK. {12;1}


   -- Check that "None" alone is properly checked:
   type T08 is new B611017A.None with null record;

   function Is_Green (A_T08 : T08) return Boolean;

   function Is_Round (A_T08 : T08) return Boolean
      with Pre'Class => Is_Green (A_T08);                      -- ERROR: {12;1}

   function Is_Hard (A_T08 : T08; N : in Natural) return Boolean
      with Pre'Class => Is_Round (A_T08);                      -- ERROR: {12;1}

   procedure Has_It (A_T08 : in out T08; N : in Natural)
      with Pre'Class => Is_Hard (A_T08, N);                    -- ERROR: {12;1}

   procedure Doesnt_Have_It (A_T08 : in out T08; N : in Natural)
      with Pre'Class => Is_Hard (A_T08, N);                    -- ERROR: {12;1}

   procedure Has_It_True (A_T08 : in out T08; N : in Natural)
      with Pre'Class => Is_Hard (A_T08, N);                    -- ERROR: {12;1}

   procedure New_Proc (A_T08 : in out T08; N : in Natural)
      with Pre'Class => Is_Hard (A_T08, N);                    -- ERROR: {12;1}


   -- Instances:

   -- (1) Pure mix-in (new routine doesn't exist):

   package Inst01 is new B611017A.Gen1 (T02);                  -- OK. {4;1}

   package Inst02 is new B611017A.Gen2 (T06);                  -- OK. {4;1}

   package Inst03 is new B611017A.Gen3 (T06);                  -- OK. {4;1}

   -- (2) New routines exist, with Pre'Class:

   type T11 is tagged null record;

   function Is_Smooth (T : T11) return Boolean;

   procedure Shine (T : in out T11)
      with Pre'Class => Is_Smooth (T);

   package Inst04 is new B611017A.Gen1 (T11);                  -- OK. {4;1}

   package Inst05 is new B611017A.Gen2 (T11);                  -- OK. {4;1}

   package Inst06 is new B611017A.Gen3 (T11);                  -- OK. {4;1}

   -- (3) New routines exist, without Pre'Class:

   type T12 is tagged null record;

   function Is_Smooth (T : T12) return Boolean;

   procedure Shine (T : in out T12);

   package Inst07 is new B611017A.Gen1 (T12);                  -- ERROR: {4;1}

   package Inst08 is new B611017A.Gen2 (T12);                  -- ERROR: {4;1}

   package Inst09 is new B611017A.Gen3 (T12);                  -- OK. {4;1}

   -- (4) New routines exist, with trivial Pre'Class:

   type T13 is tagged null record;

   function Is_Smooth (T : T13) return Boolean;

   procedure Shine (T : in out T13)
      with Pre'Class => True;

   package Inst10 is new B611017A.Gen1 (T13);                  -- OK. {4;1}

   package Inst11 is new B611017A.Gen2 (T13);                  -- OK. {4;1}

   package Inst12 is new B611017A.Gen3 (T13);                  -- OK. {4;1}

   -- (5) New routines exist, with Pre (not Pre'Class):

   type T14 is tagged null record;

   function Is_Smooth (T : T14) return Boolean;

   procedure Shine (T : in out T14)
      with Pre => Is_Smooth (T);

   package Inst13 is new B611017A.Gen1 (T14);                  -- ERROR: {4;1}

   package Inst14 is new B611017A.Gen2 (T14);                  -- ERROR: {4;1}

   package Inst15 is new B611017A.Gen3 (T14);                  -- OK. {4;1}


private
   type T03 is new B611017A.Intf with null record;
   type T05 is new T02 with null record;
end B611017;

