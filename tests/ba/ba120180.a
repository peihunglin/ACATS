-- BA120180.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--
--*
--
-- OBJECTIVE:
--    Check that a unit mentioned but not named in a private with clause and
--    not mentioned in other with clauses is not allowed in
--    the package visible part or subprogram specification of the unit that has
--    the with clause. (10.1.2(12-16/2))
--
--    Check that a unit mentioned but not named in a private with clause and
--    not mentioned in other with clauses is not allowed in
--    a context-clause use_clause. (10.1.2(12-16/2))
--
--    Check that a unit mentioned but not named in a private with clause and
--    not mentioned in other with clauses is not allowed in
--    the package visible part or subprogram specification of a public
--    descendant of the unit that has the with clause. (10.1.2(12-16/2))
--
-- TEST FILES:
--     This test consists of the following files:
--     -> BA120180.A
--        BA120181.A
--        BA120182.A
--        BA120183.A
--        BA120184.A
--        BA120185.A
--        BA120186.A
--        BA120187.A
--
-- PASS/FAIL CRITERIA:
--     Files BA120181.A, BA120182.A, BA120183.A, BA120184.A, BA120185.A,
--     BA120186.A, and BA120187.A contain errors. All errors in these files
--     must be detected to pass the test.
--
-- TEST DESCRIPTION:
--     This case is only interesting for packages (since only they can have
--     children). It is also interesting only in unrelated units (lest the
--     parent items make entities visible that we expect to be hidden).
--     The latter fact makes private packages uninteresting here.
--     So we declare a normal (parent) package, some children of it, private
--     with the children (only), and check the visibility of the contents of
--     the parent in various normal units.

--
-- CHANGE HISTORY:
--    22 May 2018   RLB   Created test from existing test BA12014.
--
--!
package BA12018_0 is

   Obj : Integer;

   type Rec is record
      A, B : Character;
   end record;

   function Func (X : Integer) return Integer;

end BA12018_0;


package BA12018_0.BA12018_1 is

    function Func (X : Integer) return Float;

end BA12018_0.BA12018_1;


package BA12018_0.BA12018_2 is

    X : Integer;

    type R is record
       A, B : Float;
    end record;

end BA12018_0.BA12018_2;

with BA12018_0.BA12018_1;
private with BA12018_0.BA12018_2;
package BA12018_T0 is
    -- Here, BA12018_0 is directly visible as it is withed as well as private
    -- withed.

    Y : Integer := BA12018_0.Obj;                -- OK. {20;1}

private

    Z : Integer renames BA12018_0.Obj;           -- OK. {25;1}

end BA12018_T0;


private with BA12018_0.BA12018_1;
private with BA12018_0.BA12018_2;
package BA12018_Parent is

    C : constant Integer;

private

    C : constant Integer := BA12018_0.Obj;       -- OK. {29;1}

end BA12018_Parent;
